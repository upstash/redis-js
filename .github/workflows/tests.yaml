name: Tests
on:
  pull_request:
  schedule:
    - cron: "0 0 * * *" # daily

jobs:



  test:
    runs-on: ubuntu-latest

    name: Tests
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - uses: pnpm/action-setup@v2
        with:
          version: 6
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Verify formatting
        run: deno fmt --check

      - name: Lint
        run: deno lint

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Run tests
        run: deno test -A --fail-fast --shuffle ./pkg
        env:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Size limit
        run: node_modules/.bin/size-limit
        working-directory: dist

  nextjs-local:
    environment: local
    needs:
      - test
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
      NEXT_PUBLIC_UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      NEXT_PUBLIC_UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}

    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Install example
        run: pnpm install
        working-directory: ./examples/nextjs

      - name: Build example
        run: pnpm build
        working-directory: ./examples/nextjs

      - name: Start example
        run: pnpm start &
        working-directory: ./examples/nextjs

      - name: Test
        run: deno test --allow-net --allow-env ./examples/nextjs/test.ts
        env:
          DEPLOYMENT_URL: http://localhost:3000

  nextjs-edge-local:
    environment: local
    needs:
      - test
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
      NEXT_PUBLIC_UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      NEXT_PUBLIC_UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}

    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Install example
        run: pnpm install
        working-directory: ./examples/nextjs_edge

      - name: Build example
        run: pnpm build
        working-directory: ./examples/nextjs_edge

      - name: Start example
        run: pnpm start &
        working-directory: ./examples/nextjs_edge

      - name: Test
        run: deno test --allow-net --allow-env ./examples/nextjs_edge/test.ts
        env:
          DEPLOYMENT_URL: http://localhost:3000

  nextjs-deployed:
    runs-on: ubuntu-latest
    concurrency: vercel
    environment: deployed
    needs:
      - release
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Deploy
        run: |
          pnpm add @upstash/redis@${{needs.release.outputs.version}}
          DEPLOYMENT_URL=$(npx vercel --token=${{ secrets.VERCEL_TOKEN }})
          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> $GITHUB_ENV
        env:
          VERCEL_ORG_ID: ${{secrets.VERCEL_TEAM_ID}}
          VERCEL_PROJECT_ID: "prj_pFFK1XgNIlnW014iiuqAIQmBBuZA"

      - name: Test
        run: deno test --allow-net --allow-env ./examples/nextjs/test.ts

  nextjs-edge-deployed:
    runs-on: ubuntu-latest
    concurrency: vercel
    environment: deployed
    needs:
      - release
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Deploy
        run: |
          pnpm add @upstash/redis@${{needs.release.outputs.version}}
          DEPLOYMENT_URL=$(npx vercel --token=${{ secrets.VERCEL_TOKEN }})
          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> $GITHUB_ENV
        env:
          VERCEL_ORG_ID: ${{secrets.VERCEL_TEAM_ID}}
          VERCEL_PROJECT_ID: "prj_bc5kMFz6ifbAaA7U3N86YSYqUUUI"

      - name: Test
        run: deno test --allow-net --allow-env ./examples/nextjs_edge/test.ts

  cloudflare-worker-local:
    environment: local
    needs:
      - test
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Install example
        run: |
          pnpm install
          pnpm install -g miniflare @cloudflare/wrangler
        working-directory: examples/cloudflare-worker

      - name: Start example
        run: miniflare -b UPSTASH_REDIS_REST_URL=http://127.0.0.1:6379 -b UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_AUTH_TOKEN }} &
        working-directory: examples/cloudflare-worker

      - run: while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8787)" != "200" ]]; do sleep 1; done
        timeout-minutes: 2

      - name: Test
        run: deno test -A ./examples/cloudflare-worker/test.ts
        env:
          DEPLOYMENT_URL: http://localhost:8787

  cloudflare-worker-deployed:
    environment: deployed
    needs:
      - release
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - uses: pnpm/action-setup@v2
        with:
          version: 6

     
      - name: Install example
        run: |
          pnpm add @upstash/redis@${{needs.release.outputs.version}}
          pnpm install -g @cloudflare/wrangler
        working-directory: examples/cloudflare-worker

      - name: Deploy
        run: wrangler publish
        working-directory: examples/cloudflare-worker
        env:
          CF_API_TOKEN: ${{secrets.CF_API_TOKEN}}

      - name: Test
        run: deno test -A ./examples/cloudflare-worker/test.ts
        env:
          DEPLOYMENT_URL: https://upstash-modules-worker.upstash.workers.dev



  cloudflare-worker-wrangler2-local:
    environment: local
    needs:
      - test
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Install example
        run: pnpm install
        working-directory: examples/cloudflare-worker-wrangler2

      - name: Add account ID
        run: echo 'account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"' >> wrangler.toml
        working-directory: examples/cloudflare-worker-wrangler2

      - name: Start example
        run: pnpm dev &
        working-directory: examples/cloudflare-worker-wrangler2
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      - run: while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8787)" != "200" ]]; do sleep 1; done
        timeout-minutes: 2

      - name: Test
        run: deno test -A ./examples/cloudflare-worker-wrangler2/test.ts
        env:
          DEPLOYMENT_URL: http://localhost:8787

  cloudflare-worker-wrangler2-deployed:
    environment: deployed
    needs:
      - release
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

     

      - name: Install example
        run: |
          pnpm add @upstash/redis@${{needs.release.outputs.version}}
        working-directory: examples/cloudflare-worker-wrangler2

      - name: Add account ID
        run: echo 'account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"' >> wrangler.toml
        working-directory: examples/cloudflare-worker-wrangler2

      - name: Deploy
        run: pnpm deploy
        working-directory: examples/cloudflare-worker-wrangler2
        env:
          CLOUDFLARE_API_TOKEN: ${{secrets.CF_API_TOKEN}}

      - name: Test
        run: deno test -A ./examples/cloudflare-worker-wrangler2/test.ts
        env:
          DEPLOYMENT_URL: https://cloudflare-worker-wrangler2.upstash.workers.dev

  fastly-local:
    environment: local
    needs:
      - test
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Install example
        working-directory: ./examples/fastly
        run: |
          pnpm install
          curl -L https://github.com/fastly/cli/releases/download/v1.7.0/fastly_v1.7.0_linux-amd64.tar.gz > fastly.tar.gz
          tar -xf ./fastly.tar.gz

      - name: Inject variables
        working-directory: ./examples/fastly
        run: |
          sed -i 's;<UPSTASH_REDIS_REST_URL>;http://127.0.0.1:6379;' fastly.toml
          sed -i 's;<UPSTASH_REDIS_REST_URL>;http://127.0.0.1:6379;' src/index.js
          sed -i 's;<UPSTASH_REDIS_REST_TOKEN>;${{ secrets.UPSTASH_AUTH_TOKEN }};' src/index.js

      - name: Start example
        working-directory: ./examples/fastly
        run: ./fastly compute serve &

      - run: while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:7676/)" != "200" ]]; do sleep 1; done
        timeout-minutes: 2

      - name: Test
        run: deno test -A ./examples/fastly/test.ts
        env:
          DEPLOYMENT_URL: http://localhost:7676

  fastly-deployed:
    environment: deployed
    needs:
      - release
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

     

      - name: Install example
        working-directory: ./examples/fastly
        run: |
          pnpm add @upstash/redis@${{needs.release.outputs.version}}
          curl -L https://github.com/fastly/cli/releases/download/v1.7.0/fastly_v1.7.0_linux-amd64.tar.gz > fastly.tar.gz
          tar -xf ./fastly.tar.gz

      - name: Inject variables
        working-directory: ./examples/fastly
        run: |
          sed -i 's;<UPSTASH_REDIS_REST_URL>;${{ secrets.UPSTASH_REDIS_REST_URL_CLOUD }};' fastly.toml
          sed -i 's;<UPSTASH_REDIS_REST_URL>;${{ secrets.UPSTASH_REDIS_REST_URL_CLOUD }};' src/index.js
          sed -i 's;<UPSTASH_REDIS_REST_TOKEN>;${{ secrets.UPSTASH_REDIS_REST_TOKEN_CLOUD }};' src/index.js

      - name: Deploy
        working-directory: ./examples/fastly
        run: ./fastly compute publish --service-id=${{ secrets.FASTLY_SERVICE_ID }}
        env:
          FASTLY_API_TOKEN: ${{secrets.FASTLY_API_TOKEN}}
      - run: while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://terminally-flowing-lizard.edgecompute.app)" != "200" ]]; do sleep 1; done
        timeout-minutes: 2
      - name: Test
        run: deno test -A ./examples/fastly/test.ts
        env:
          DEPLOYMENT_URL: https://terminally-flowing-lizard.edgecompute.app

  nodejs-local:
    environment: local
    needs:
      - test
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Install example
        run: |
          pnpm install
        working-directory: examples/nodejs

      - name: Run example
        run: node ./index.js
        working-directory: examples/nodejs

  nodejs-18-local:
    environment: local
    needs:
      - test
    env:
      UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Build
        run: deno run -A ./cmd/build.ts

      - name: Start redis server
        uses: ./.github/actions/redis
        with:
          UPSTASH_REDIS_REST_URL: http://127.0.0.1:6379
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_AUTH_TOKEN }}
          UPSTASH_REPO_ACCESS_TOKEN: ${{ secrets.UPSTASH_REPO_ACCESS_TOKEN }}
          REDIS_SERVER_CONFIG: ${{ secrets.REDIS_SERVER_CONFIG }}

      - name: Install example
        run: |
          pnpm install
        working-directory: examples/nodejs-18

      - name: Run example
        run: node ./index.js
        working-directory: examples/nodejs-18



  release:
    outputs:
      version: ${{ steps.version.outputs.version }}
    needs:
      - nodejs-local
      - nodejs-18-local
      - fastly-local
      - nextjs-local
      - nextjs-edge-local
      - cloudflare-worker-local
      - cloudflare-worker-wrangler2-local

    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Get version
        id:  version
        run: echo "::set-output name=version::v0.0.0-ci.${GITHUB_SHA::8}"

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Build
        run: deno run -A ./cmd/build.ts ${{ steps.version.outputs.version }}

      - name: Publish ci version
        working-directory: ./dist
        run: |
          echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" > .npmrc
          npm publish --access public --tag=ci 
